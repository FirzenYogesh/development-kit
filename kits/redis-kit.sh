#!/usr/bin/env bash

# run proper init scripts based on execution environment
# DEVLOPMENT_KIT_EXEC_ENV is not set in production to avoid hinderance
if [[ "$DEVLOPMENT_KIT_EXEC_ENV" == "dev" ]]; then
    source ./commons/utils.sh
    MODE=$(./commons/task-mode.sh "$1")
    eval "$(./commons/get-os.sh)"
else
    source $(curl -o- "https://raw.githubusercontent.com/FirzenYogesh/development-kit/main/commons/utils.sh")
    MODE=$(curl -o- "https://raw.githubusercontent.com/FirzenYogesh/development-kit/main/commons/task-mode.sh" | bash -s "$1")
    eval "$(curl -o- "https://raw.githubusercontent.com/FirzenYogesh/development-kit/main/commons/get-os.sh" | bash)"
fi

if ! commandExists make &> /dev/null; then
    if [[ $OS == "linux" ]]; then
        if [[ $OS_VARIENT == "ubuntu" ]] || [[ $OS_VARIENT == "debian" ]]; then
            sudo apt install -y make build-essential tcl
        elif [[ $OS_VARIENT == "centos" ]]; then
            sudo yum groupinstall -y "Development Tools"
        fi
    elif [[ $OS == "macos" ]]; then
        xcode-select --install
    fi
fi


WORKSPACE="$DEVELOPMENT_KIT_DB_HOME/redis"
mkdir -p "$WORKSPACE" && cd "$_"

REDIS_DATA="$WORKSPACE/data"
REDIS_LOG="$WORKSPACE/log"

mkdir -p "$REDIS_DATA"
mkdir -p "$REDIS_LOG"

REDIS_CONF="$WORKSPACE/redis.conf"

if [[ -z "$2" ]]; then
    REDIS_VERSION="stable"
else
    REDIS_VERSION="$2"
fi
BASE_URL="http://download.redis.io"
FILE_EXTENSION="tar.gz"

FOLDER_NAME="redis-$REDIS_VERSION"

if [[ $OS == "linux" ]]; then
    SERVICE_FILE="/usr/lib/systemd/user/redis-server.service"
elif [[ $OS == "macos" ]]; then
    SERVICE_FILE="$HOME/Library/LaunchAgents/development-kit.redis-server.plist"
fi

switchVersion() {
    softLink "$WORKSPACE/$FOLDER_NAME" "$WORKSPACE/current" 
}

setExecutables() {
    softLink "$WORKSPACE/current/src/redis-server" "$DEVELOPMENT_KIT_EXECUTABLES/redis-server"
    softLink "$WORKSPACE/current/src/redis-cli" "$DEVELOPMENT_KIT_EXECUTABLES/redis-cli"
}

setEnv() {
    if [[ -z "$REDIS_HOME" ]]; then
        {
            echo 'export REDIS_HOME="$DEVELOPMENT_KIT_DB_HOME/redis/current"' 
        } >> "$DEVELOPMENT_KIT_ENV"
        # shellcheck disable=SC1090
        # disabling this rule as it is a constant variable
        source "$DEVELOPMENT_KIT_MAIN"
    fi
}

redisConfigFile() {
    if checkIfFileExists "$REDIS_CONF"; then
        echo "A redis configuration already exists. Skipping the auto generation of config file"
    else
        echo "Generating redis configuration file"
        cp "$WORKSPACE/current/redis.conf" "$REDIS_CONF"
        echo "
# generated by development-kit
# https://github.com/FirzenYogesh/development-kit

# For more configuration please refer the official redis documentation
# https://redis.io/topics/config
" | cat - "$REDIS_CONF" > temp && mv temp "$REDIS_CONF"
    fi
}

macosDaemonFile() {
    if checkIfFileExists "$SERVICE_FILE"; then
        echo "A service file already exists. Skipping the auto generation of the service file"
    else
        writeToFile "
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
    <dict>
        <key>Label</key>
        <string>development-kit.redis-server</string>
        <key>ProgramArguments</key>
        <array>
            <string>$REDIS_HOME/current/src/redis-server</string>
            <string>$REDIS_CONF</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>KeepAlive</key>
        <false/>
        <key>WorkingDirectory</key>
        <string>/usr/local</string>
        <key>StandardErrorPath</key>
        <string>$REDIS_LOG/redis.log</string>
        <key>StandardOutPath</key>
        <string>$REDIS_LOG/redis.log</string>
    </dict>
</plist>
" "$SERVICE_FILE"
    fi
}

linuxDaemonFile() {
    if checkIfFileExists "$SERVICE_FILE"; then
        echo "A service file already exists. Skipping the auto generation of the service file"
    else
        LOCAL_USER_SERVICE_FILE="$HOME/.config/systemd/user/default.target.wants/redis-server.service"
        mkdir -p "$(dirname "$LOCAL_USER_SERVICE_FILE")"
        writeToFile "
# generated by development-kit

[Unit]
Description=Redis Service
After=network.target
Documentation=https://redis.io/documentation

[Service]

Restart=on-failure
RestartSec=5s

Type=exec
EnvironmentFile=-$WORKSPACE/redis.env
ExecStart=$REDIS_HOME/src/redis-server $REDIS_CONFIG
PIDFile=$WORKSPACE/redis.pid

[Install]
WantedBy=default.target
" "$SERVICE_FILE" true
        if checkIfFileExists "$LOCAL_USER_SERVICE_FILE"; then
            echo "A soft link already exists"
        else
            softLink "$SERVICE_FILE" "$LOCAL_USER_SERVICE_FILE"
        fi
    fi
}

checkIfVersionExists() {
    if ! checkIfFolderExists "$FOLDER_NAME"; then
        echo "This version does not exist"
        exit 1
    fi
}

if [[ $MODE == "install" ]]; then
    mkdir -p "$FOLDER_NAME"
    FILE="$FOLDER_NAME.$FILE_EXTENSION"

    
    URL="$BASE_URL/$FILE"

    echo "Downloading from $URL"
    downloadFile "$FILE" "$URL"
    if [[ $? -ne 0 ]]; then
        echo "Failed to download from the url $URL"
        URL="$BASE_URL/releases/$FILE"
        echo "Downloading from $URL"
        downloadFile "$FILE" "$URL"

        if [[ $? -ne 0 ]]; then
            echo "This version does not exist"
            exit 1
        fi
    fi

    tar zxf "$FILE" -C "$FOLDER_NAME" --strip-components 1

    cd "$FOLDER_NAME"
    make
    cd src && make test


    switchVersion

    if ! commandExists redis-cli || ! commandExists redis-server; then
        setExecutables
    fi
    setEnv
    cd "$WORKSPACE"
    rm "$FILE"

    redisConfigFile
    if [[ $OS == "linux" ]]; then
        linuxDaemonFile
        systemctl --user start redis-server.service
        systemctl --user enable redis-server.service
    elif [[ $OS == "macos" ]]; then
        macosDaemonFile
        launchctl load "$SERVICE_FILE"
        launchctl start development-kit.redis-server
        launchctl enable development-kit.redis-server
    fi
elif [[ $MODE == "switch" ]]; then

    checkIfVersionExists
    if [[ $OS == "linux" ]]; then
        systemctl --user stop redis-server.service
    elif [[ $MODE == "macos" ]]; then
        launchctl stop development-kit.redis-server
    fi

    switchVersion

    if [[ $OS == "linux" ]]; then
        systemctl --user start redis-server.service
    elif [[ $OS == "macos" ]]; then
        launchctl start development-kit.redis-server
    fi
elif [[ $MODE == "uninstall" ]]; then

    checkIfVersionExists
    if [[ $OS == "linux" ]]; then
        systemctl --user stop redis-server.service
        systemctl --user disable redis-server.service
    elif [[ $MODE == "macos" ]]; then
        launchctl stop development-kit.redis-server
        launchctl disable development-kit.redis-server
        launchctl unload "$SERVICE_FILE"
    fi

    rm -rf "$FOLDER_NAME"
    echo "Please switch the redis version if needed"
elif [[ $MODE == "fix-env" ]]; then
    setExecutables
    setEnv
fi
